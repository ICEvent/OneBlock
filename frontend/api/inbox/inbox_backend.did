type Subject = text;
type Sender = text;
type Result_2 = 
 variant {
   err: text;
   ok: int;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: nat64;
 };
type Message = 
 record {
   carrier: principal;
   content: Content;
   id: nat;
   sender: Sender;
   subject: Subject;
   timestamp: int;
 };
type Inbox = 
 service {
   addMember: (principal) -> (Result_2);
   allow: (principal) -> (Result_2);
   block: (text) -> (Result_2);
   changeName: (text) -> (Result_1);
   changeOwner: (principal) -> (Result_2);
   changeVersion: (text) -> (Result_1);
   drop: (Subject, Content, Sender) -> (Result_2);
   fetch: () -> (vec Message) query;
   name: () -> (text) query;
   ping: () -> (record {
                  name: text;
                  version: text;
                }) query;
   read: (nat) -> (Result_2);
   search: (int, int, opt text) -> (vec Message) query;
   setOpenToCarrier: (bool) -> (Result_1);
   transfer: (Currency, opt nat, nat64, principal) -> (Result);
 };
type Currency = 
 variant {
   BTC;
   ETH;
   ICP;
 };
type Content = text;
service : (text) -> Inbox
